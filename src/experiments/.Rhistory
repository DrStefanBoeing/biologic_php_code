new.lab.category.table = FALSE,
cat.description.db  = "internal_categories",
cat.description.db.table = "category_description",
cat.description.text = as.vector(dfCat[1,i]),
lab.name = lab.name
)
catIDvec <- c(
catIDvec,
catID
)
}
dfCat <- read.delim(
path2templateFileName,
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE
)
catIDvec <- as.vector(NULL, mode = "character")
for (i in 2:ncol(dfCat)){
geneVec <- as.vector(
unique(
sort(
dfCat[2:nrow(dfCat),i]
)
)
)
geneVec <- gsub("01-Mar", "MARCH1", geneVec)
geneVec <- geneVec[geneVec != ""]
##########################################
## Part 4: Add to database              ##
##########################################
#library(SBwebtools)
catID <- add.category.to.lab.reference.table.hs(
host = host,
pwd = db.pwd,
user = db.user,
cat.ref.db = cat.ref.db,
cat.ref.db.table = cat.ref.db.table,
gene.vector = geneVec,
gene.id = gene.id.symbol, #options hgnc_symbol, mgi_symbol
mm.hs.conversion.file =  paste0(
hpc.mount,
"Projects/reference_data/20160303.homologene.data.txt"
),
cat_name = as.vector(names(dfCat)[i]),
cat_type = cat_type,
data_source = data_source,
comments_1 = "",
comments_2 = "",
new.lab.category.table = FALSE,
cat.description.db  = "internal_categories",
cat.description.db.table = "category_description",
cat.description.text = as.vector(dfCat[1,i]),
lab.name = lab.name
)
catIDvec <- c(
catIDvec,
catID
)
}
i
head(dfCat)
cols2Index <- "gene"
dbTableName <- "asl319_gene_id_tb"
cmd.string <- paste0("CREATE INDEX idx_",cols2Index[i]," ON ",dbTableName," (",cols2Index[i],")")
i=1
cmd.string <- paste0("CREATE INDEX idx_",cols2Index[i]," ON ",dbTableName," (",cols2Index[i],")")
cmd.string
0.12*450
?write.csv
paste0("LOAD DATA INFILE 'temp.csv' INTO TABLE ", paste0(Obio@parameterList$project_id, "test_infile_gene_expr_tb"), " FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' -- or '\r\n' ")
0.2*450
8*170
600/1.1
8571/342
5871*7.9/100
5871*7.9/100/12
8571*7.9/100/12
a <- list(b=list("c" = c(1,2)))
names(a)
exist(a)
exist(@)
exist()
exists(a)
exists(@)
exists("a")
d = a
exists("a$b")
exists("get(a$b)")
a$b
is.null(a$b)
is.null(a$c)
install.packages("RMySQL")
install.packages(
"https://biologic-db.org/packages/bioLOGIC_1.0.tar.gz",
repos = NULL,
type="source"
)
library(bioLOGIC)
userName <- "csl316data"
pass <- "csl316data123"
dbHost <- "10.27.241.234"
db = "csl_data"
dbTable <- "p316_rna_seq_table"
dfData <- import.db.table.from.db(
dbname = db,
dbtable = dbTable,
host = dbHost,
user = userName,
password = pass
)
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
remove.packages("RMySql")
remove.packages("RMySQL")
remove.packages("RMySQL")
uninstall.packages("RMySQL")
.libPaths()
getwd()
installed.packages()
head(install.packages())
installed.packages()[[1]]
installed.packages()[[2]]
as.vector(installed.packages())
list.of.packages[!(list.of.packages %in% installed.packages()[,"Rccp"])]
list.of.packages[!(c("Rccp") %in% installed.packages()[,"Package"])]
installed.packages()[,"Package"]
as.vector(installed.packages()[,"Package"])
grep("RMySQL", as.vector(installed.packages()[,"Package"]))
grep("utils", as.vector(installed.packages()[,"Package"]))
length(grep("RMySQL", as.vector(installed.packages()[,"Package"])) ==0 )
grep("RMySQL", as.vector(installed.packages()[,"Package"]))
(length(grep("RMySQL", as.vector(installed.packages()[,"Package"]))) ==0 )
6.6-6.3
6.6-6.3*450
0.3*450
0.37*450
db.pwd <- "5+3f4nB04042018"
VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
if (dir.exists("/Volumes/babs/working/boeings/")){
hpc.mount <- "/Volumes/babs/working/boeings/"
} else if (dir.exists("Y:/working/boeings/")){
hpc.mount <- "Y:/working/boeings/"
} else if (dir.exists("/camp/stp/babs/working/boeings/")){
hpc.mount <- "/camp/stp/babs/working/boeings/"
} else {
hpc.mount <- ""
}
if (length(.libPaths()) > 2){
.libPaths(.libPaths()[2:3])
}
source(
paste0(
hpc.mount,
"Stefan/protocol_files/github/boeings/packages/packageSourceCode/SBwebtools.pckg.r"
)
)
gene.id.symbol <- "mgi_symbol"
cat.ref.db.table <- "as_lab_categories"
cat.ref.db <- "reference_categories_db_new"
cat_type <- "Schaefer Lab"
data_source <- "MC"
lab.name <- "Schaefer"
db.user = "boeingS"
host = "10.152.22.193"
geneVec <- retrieve.gene.category.from.db(cat_id = "ag_lab_categories__10", password = db.pwd)
geneVec <- retrieve.gene.category.from.db(cat_id = "ag_lab_categories__10", password = db.pwd, host = host, user = db.user, gene.symbol = "mgi_symbol")
geneVec
catIDvec
dfCat <- read.delim(
path2templateFileName,
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE
)
catIDvec <- as.vector(NULL, mode = "character")
geneVec
cat.ref.db
cat.ref.db.table
#library(SBwebtools)
catID <- add.category.to.lab.reference.table.hs(
host = host,
pwd = db.pwd,
user = db.user,
cat.ref.db = cat.ref.db,
cat.ref.db.table = cat.ref.db.table,
gene.vector = geneVec,
gene.id = gene.id.symbol, #options hgnc_symbol, mgi_symbol
mm.hs.conversion.file =  paste0(
hpc.mount,
"Projects/reference_data/20160303.homologene.data.txt"
),
cat_name = "Transcription_Factors_MC",
cat_type = cat_type,
data_source = data_source,
comments_1 = "",
comments_2 = "",
new.lab.category.table = T,
cat.description.db  = "internal_categories",
cat.description.db.table = "category_description",
cat.description.text = "Metacore-derrived transcripton factors",
lab.name = lab.name
)
if (dir.exists("/Volumes/babs/working/boeings/")){
hpc.mount <- "/Volumes/babs/working/boeings/"
} else if (dir.exists("Y:/working/boeings/")){
hpc.mount <- "Y:/working/boeings/"
} else if (dir.exists("/camp/stp/babs/working/boeings/")){
hpc.mount <- "/camp/stp/babs/working/boeings/"
} else {
hpc.mount <- ""
}
# source(
#     paste0(
#         hpc.mount,
#         "Stefan/protocol_files/github/boeings/packages/cDev.package.SBwebtools.V7.r"
#     )
# )
source(
paste0(
hpc.mount,
"Stefan/protocol_files/github/boeings/packages/packageSourceCode/SBwebtools.pckg.r"
)
)
###############################################################################
## Set libpaths                                                              ##
if (length(.libPaths()) > 2){
.libPaths(.libPaths()[2:3])
}
## Done setting Stefan's libpaths                                            ##
###############################################################################
###############################################################################
## Create S4 object for this analysis                                        ##
## Check parameters before proceeding ##
Obio = new(
"bioLOGIC",
parameterList = list(
"user_ids" = c(
"project",
"vp.lab.all"
),
"folder" = "pachnisv/tiffany.heanue/324_VPL_TH_bulk_RNA_seq_zebrafish_larval_neurons_SRP135259/",
"sra.id.vector" = "SRP135259",
"gse.id.vector" = "GSE111765",
"lims.id" = "",
"machine" = "TBD",
"experiment.type" = "rna_seq",    # any
"species" = "danio_rerio", # Species has to be "mus_musculus", "homo_sapiens", "danio_rerio"
"release" = "release-89", #release-86, release-89
"project_id" = "vpl324",
"labname" = "Pachnis",
"db.user" = "boeingS",
"host" = "10.27.241.234",
"timecourse.units" = "",
"count.table.headline" = "TPM Values for all Samples",
"count.table.sidelabel" = "TPM",
"heamap.headline.text" = "Heatmap: Row-averaged TPM",
"paired.end" = TRUE,
"stranded" = TRUE,
"loadR" = "module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/3.6.0-foss-2016b-BABS;R;",
"ref.cat.db" = "reference_categories_db_new",
"ref.cat.db.table" = "reference_categories_db_new",
"read.length" =  "50bp",
"webSiteDir" = "",
"pathToSeqStorageFolder" = c(
"/camp/stp/sequencing/inputs/instruments/fastq/190717_K00102_0366_AH7GMKBBXY/fastq/RN19134/"
),
"addFullTPMtable" = FALSE,
"hpcMount" = "",
"batchMode" = FALSE,
"parallelProcessing" = FALSE,
"ModuleFASTQC" = "module load FastQC/0.11.5-Java-1.8.0_92",
"ModuleTrimGalore" = "Trim_Galore/0.4.2-foss-2016b",
"TrimGaloreMinLength" = 25,
"TrimGaloreMinQuality" = 20,
"DEseq2betaPrior" = TRUE,
"AlignFASTQcolumn" = "FASTQ_trimgalore",
"timeseries" = FALSE,
"primDataDB" = "asl_data"
)
)
## Done creating S4 object for this analysis                                 ##
#####
db.pwd
db.pwd <- "5+3f4nB04042018"
workspaceFN <- paste0(
Obio@parameterList$localWorkDir,
Obio@parameterList$project_id,
".RData"
)
load(workspaceFN)
Obio = new(
"bioLOGIC",
parameterList = list(
"user_ids" = c(
"project",
"vp.lab.all"
),
"folder" = "pachnisv/tiffany.heanue/324_VPL_TH_bulk_RNA_seq_zebrafish_larval_neurons_SRP135259/",
"sra.id.vector" = "SRP135259",
"gse.id.vector" = "GSE111765",
"lims.id" = "",
"machine" = "TBD",
"experiment.type" = "rna_seq",    # any
"species" = "danio_rerio", # Species has to be "mus_musculus", "homo_sapiens", "danio_rerio"
"release" = "release-89", #release-86, release-89
"project_id" = "vpl324",
"labname" = "Pachnis",
"db.user" = "boeingS",
"host" = "10.27.241.234",
"timecourse.units" = "",
"count.table.headline" = "TPM Values for all Samples",
"count.table.sidelabel" = "TPM",
"heamap.headline.text" = "Heatmap: Row-averaged TPM",
"paired.end" = TRUE,
"stranded" = TRUE,
"loadR" = "module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/3.6.0-foss-2016b-BABS;R;",
"ref.cat.db" = "reference_categories_db_new",
"ref.cat.db.table" = "reference_categories_db_new",
"read.length" =  "50bp",
"webSiteDir" = "",
"pathToSeqStorageFolder" = c(
"/camp/stp/sequencing/inputs/instruments/fastq/190717_K00102_0366_AH7GMKBBXY/fastq/RN19134/"
),
"addFullTPMtable" = FALSE,
"hpcMount" = "",
"batchMode" = FALSE,
"parallelProcessing" = FALSE,
"ModuleFASTQC" = "module load FastQC/0.11.5-Java-1.8.0_92",
"ModuleTrimGalore" = "Trim_Galore/0.4.2-foss-2016b",
"TrimGaloreMinLength" = 25,
"TrimGaloreMinQuality" = 20,
"DEseq2betaPrior" = TRUE,
"AlignFASTQcolumn" = "FASTQ_trimgalore",
"timeseries" = FALSE,
"primDataDB" = "asl_data"
)
)
## Done creating S4 object for this analysis                                 ##
###############################################################################
workspaceFN <- paste0(
Obio@parameterList$localWorkDir,
Obio@parameterList$project_id,
".RData"
)
load(workspaceFN)
workspaceFN <- paste0(
Obio@parameterList$localWorkDir,
Obio@parameterList$project_id,
".RData"
)
load(workspaceFN)
Obio <- setMountingPoint(Obio)
Obio <- setAnalysisPaths(Obio)
Obio <- setCrickGenomeAndGeneNameTable(Obio)
Obio <- createAnalysisFolders(
Obio,
baseDir="/camp/stp/babs/working/boeings/Projects/",
localBaseDir = paste0(hpc.mount, "Projects/")
)
Obio <- setDataBaseParameters(Obio)
workspaceFN <- paste0(
Obio@parameterList$localWorkDir,
Obio@parameterList$project_id,
".RData"
)
load(workspaceFN)
head(Obio@databaseTable)
head(Obio@databaseTable$count_cut_off)
Obio@databaseTable[["add_col___Avg_TPM_per_sample"]] <- Obio@databaseTable$count_cut_off
Obio@databaseTable[["add_col___Avg_TPM_per_sample"]] <- Obio@databaseTable$count_cut_off
cmd.vec <- upload.datatable.to.database(
host = Obio@parameterList$host,
user = Obio@parameterList$db.user,
password = db.pwd,
prim.data.db = Obio@parameterList$primDataDB,
dbTableName = Obio@parameterList$rnaseqdbTableName,
df.data = Obio@databaseTable, #[Obio@databaseTable$count_cut_off > 1, ],
db.col.parameter.list = list(
"VARCHAR(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci" = c("Gene_name","gene_description"),
"VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci" = c("ENSDARG", "dr_symbol","clone_based_gene_ID","Gene_description","Gene_type","ENSG", "ENSMUSG", "hgnc_symbol", "mgi_symbol", "uniprot", "entrezgene","display_ptm", "^sequence_window", "p_site_env","for_GSEA_gene_chip","associated_gene_name", "gene_type"),
"VARCHAR(1) CHARACTER SET latin1 COLLATE latin1_swedish_ci" = c("ppos", "amino_acid", "charge","known_site"),
"BIGINT(8) NULL DEFAULT NULL" = c("row_names"),
"INT(8) NULL DEFAULT NULL" = c("DEseq2Normalized","CoVarOrder","row_id", "cluster_order","cluster_id", "count_cut_off", "add_col___Avg_TPM_per_sample","^position$", "raw_counts"),
"DECIMAL(6,3) NULL DEFAULT NULL" = c( "lg2BaseMean","lg2baseMean","contrast_P_PCA_estimatePCA","^CoVar$","NES", "logFC", "lg2_avg", "intensity", "^int", "iBAQ","^localization_prob$", "stat", "lg10p"),
"DECIMAL(6,5) NULL DEFAULT NULL" = c("r2_PCA","padj", "pvalue","^pep$", "p_value_PCA"),
"DECIMAL(6,1) NULL DEFAULT NULL" = c("norm_counts")
),
new.table = TRUE
)
killDbConnections()
sample.order <- sort(names(Obio@databaseTable)[grep("norm_counts_", names(Obio@databaseTable))])
paste0("sample.order <- c('",paste(sample.order, collapse = "','"),"')")
sample.order <- c('norm_counts_N_aNP_1_TPM','norm_counts_N_aNP_2_TPM','norm_counts_N_aNP_3_TPM','norm_counts_N_aRG_1_TPM','norm_counts_N_aRG_2_TPM','norm_counts_N_aRG_3_TPM','norm_counts_N_qRG_1_TPM','norm_counts_N_qRG_2_TPM','norm_counts_N_qRG_3_TPM')
## Sort database.table ##
orderVec <- names(Obio@databaseTable)
lg2Order <- gsub("norm_counts_", "lg2_avg_", sample.order)
orderVec <- orderVec[!(orderVec %in% sample.order)]
orderVec <- orderVec[!(orderVec %in% lg2Order)]
orderVec <- c(
orderVec,
sample.order,
lg2Order
)
Obio@databaseTable <- Obio@databaseTable[,orderVec]
## Get relevant colors ##
sample.colors <- sample.order
sample.colors <- gsub("_TPM", "", sample.colors)
sample.colors <- substr(sample.colors, 1, nchar(sample.colors)-2)
sample.colors <- gsub("_$", "", sample.colors)
library(scales)
color.groups <- unique(sample.colors)
#color.groups <- hue_pal()(length(color.groups))
#dfDesign[["sample_color"]] <- "orange"
nSampleGroups <- length(unique(color.groups))
# library(RColorBrewer)
# selcol <- colorRampPalette(brewer.pal(12,"Set3"))
color.sel = hue_pal()(length(color.groups))
for (i in 1:length(color.groups)){
sample.colors[grep(color.groups[i], sample.colors)] <- color.sel[i]
}
if (!exists("gsea.cat.lines")){
gsea.cat.lines <- ""
downloadCatEnrichmentFNxlsx <- ""
} else {
downloadCatEnrichmentFNxlsx <- paste0("outputs/", Obio@parameterList$project.code, ".enriched.categories.txt")
}
if (!exists("timecourse.cat.lines")){
timecourse.cat.lines <- NA
}
#library(SBwebtools)
setwd(Obio@parameterList$localWorkDir)
#library(SBwebtools)
webSiteDir <- Obio@parameterList$localWorkDir
project.code <- Obio@parameterList$project_id
setwd(Obio@parameterList$localWorkDir)
getwd()
createSettingsFile(
obj = Obio,
df.data = Obio@databaseTable,
primDataTable = Obio@parameterList$rnaseqdbTableName,
pcaDbTable = Obio@parameterList$PCAdbTableName,
defaultXcolName = "contrast_1_logFC_N_qRG_vs_N_aRG",
defaultYcolName = "contrast_1_lg10p_N_qRG_vs_N_aRG",
sample.order = sample.order, #set to "" to go with default sorting
heatmapSampleOrder = "",
sample.names = "", # default is sample.order
count.sample.colors = sample.colors,
ptm.colum = "",
count.table.headline = Obio@parameterList$count.table.headline,
count.table.sidelabel = Obio@parameterList$count.table.sidelabel,
venn.slider.selector.strings = c(
"_logFC",
"contrast_1_padj",
"contrast_2_padj",
"contrast_3_padj",
"contrast_A_padj",
"contrast_L_lg10p",
"add_col___Avg_TPM_per_sample"
),
plot.selection.strings = c(
"_logFC",
"_lg10p",
"contrast_P_PCA_estimatePCA",
"_PCA_",
"lg2BaseMean",
"add_col___Avg_TPM_per_sample"
),
webSiteDir = paste0(hpc.mount, "Stefan/protocol_files/github/biologic/src/experiments/"),
upper_heatmap_limit = 3,
lower_heatmap_limit = -3,
heamap.headline.text = Obio@parameterList$heamap.headline.text,
project_id = Obio@parameterList$project_id
)
createSettingsFile(
obj = Obio,
df.data = Obio@databaseTable,
primDataTable = Obio@parameterList$rnaseqdbTableName,
pcaDbTable = Obio@parameterList$PCAdbTableName,
defaultXcolName = "contrast_1_logFC_N_qRG_vs_N_aRG",
defaultYcolName = "contrast_1_lg10p_N_qRG_vs_N_aRG",
sample.order = sample.order, #set to "" to go with default sorting
heatmapSampleOrder = "",
sample.names = "", # default is sample.order
count.sample.colors = sample.colors,
ptm.colum = "",
count.table.headline = Obio@parameterList$count.table.headline,
count.table.sidelabel = Obio@parameterList$count.table.sidelabel,
venn.slider.selector.strings = c(
"_logFC",
"contrast_1_padj",
"contrast_2_padj",
"contrast_3_padj",
"contrast_A_padj",
"contrast_L_lg10p",
"add_col___Avg_TPM_per_sample"
),
plot.selection.strings = c(
"_logFC",
"_lg10p",
"contrast_P_PCA_estimatePCA",
"_PCA_",
"lg2BaseMean",
"add_col___Avg_TPM_per_sample"
),
webSiteDir = paste0(hpc.mount, "Stefan/protocol_files/github/biologic/src/experiments/"),
upper_heatmap_limit = 3,
lower_heatmap_limit = -3,
heamap.headline.text = Obio@parameterList$heamap.headline.text,
project_id = Obio@parameterList$project_id
)
