{% block head_scripts %}
    <link href='{{ url('/dist/css/jquery-ui.css') }}' rel='stylesheet'>
    <script src='{{ url('/dist/js/jquery-ui.js') }}'>
    
    <script src='https://code.highcharts.com/highcharts.js'></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
{% endblock %}

<script>
    jQuery(document).ready(function() {
        chart = new Highcharts.Chart({
            chart: {renderTo: 'scatterplot',
                type: 'scatter',
                borderWidth: 2,
                borderColor: '#009900',
                zoomType: 'xy',
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                    stops: [[0, 'rgb(255, 255, 255)'],
                        [1, 'rgb(255, 255, 255)']
                    ]
                },
                plotBackgroundColor: 'rgba(255, 255, 255, .9)',
                plotShadow: true,
                plotBorderWidth: 1
            },

            title: {text: ''
            },

            credits: {
                enabled: false
            },
            subtitle: {text: ''},
            xAxis: {
                title: {
                    enabled: true,
                    text: '{{ scatterplotProperties['x_axis_label'] }}'
                },
                gridLineWidth: 2,
                plotLines: [{color: 'red', // Color value
                    dashStyle: 'longdashdot', // Style of the plot line. Default to solid
                    value: '{{ scatterplotProperties['x_low_line'] }}',  // Value of where the line will appear
                    width: 1 // Width of the line
                },

                    {color: 'red', // Color value
                        dashStyle: 'longdashdot', // Style of the plot line. Default to solid
                        value: '{{ scatterplotProperties['x_high_line']  }}',  // Value of where the line will appear
                        width: 1 // Width of the line
                    },

                    {color: 'black', // Color value
                        dashStyle: 'solid', // Style of the plot line. Default to solid
                        value: 0,  // Value of where the line will appear
                        width: 1 // Width of the line
                    }]
            },
            yAxis: {title:
                    {
                        enabled: true,
                        text: '{{ scatterplotProperties['y_axis_label'] }}'
                    },
                    gridLineWidth: 2,
                plotLines: [{color: 'red', // Color value
                    dashStyle: 'longdashdot', // Style of the plot line. Default to solid
                    value: '{{ scatterplotProperties['y_low_line'] }}',  // Value of where the line will appear
                    width: 1 // Width of the line
                },

                    {color: 'red', // Color value
                        dashStyle: 'longdashdot', // Style of the plot line. Default to solid
                        value: '{{ scatterplotProperties['y_high_line'] }}',  // Value of where the line will appear
                        width: 1 // Width of the line
                    },

                    {color: 'black', // Color value
                        dashStyle: 'solid', // Style of the plot line. Default to solid
                        value: 0,  // Value of where the line will appear
                        width: 1 // Width of the line
                    }]
            },
            legend: {
                backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF',
                borderWidth: 1
            },

            plotOptions: {
                scatter: {marker: {
                        radius: 5,
                        states: {
                            hover: {enabled: true,
                                lineColor: 'rgb(100,100,100)'
                            }
                        }
                    },
                    states: {
                        hover: {
                            marker: {enabled: false
                            }
                        }
                    },
                    tooltip: {
                        headerFormat: '<b>{series.name}</b><br>',
                        pointFormat: 'Site:{point.name}',
                    },
                    cursor: 'pointer',
                    events: {
                        click: function(event){
                            var str = '{{ url('/'~experiment_code~'/gene-view') }}?query='+ event.point.name + '&exact=TRUE';
                            window.open(str, '_blank');
                        }
                    }
                }
            },

            series: [{name: '{{ scatterplotProperties['headlineStr'] }}',
                data: {{ scatterplotProperties['background_series'] | raw}},
                color: 'rgba(0,0,0,0.5)',
                turboThreshold: 25000
            },
                {data: {{ scatterplotProperties['highlight_series'] | raw }},
                    name: '{{ scatterplotProperties['highlightStr'] }}',
                    color: '#FF0000',
                    turboThreshold: 25000,
                    marker: {symbol: 'circle'
                    }
                }]

        });
    });

</script>

<style>
    #gene_cat_selection_container {
        margin-bottom: 10px;
    }
    #automplete_scat_gene,
    #automplete_scat_cat {
        font-size: 20px;
    }
    #gene_cat_selection_container > button {
        padding: 5px 20px;font-size: 20px;margin-bottom: 9px;
    }
    #gene_cat_selection_container .category_lookup {
        display: inline-block; vertical-align: middle;
    }
    #gene_lookup_container {
        float: left; clear: right; margin-left: 5px;
    }
    #category_lookup_container {
        float: left; clear: both; margin-left: 5px;
    }
    #automplete_scat_cat,
    #btn_scat_cat {
        display: none;
    }
</style>

<div id="gene_cat_selection_container">
    <input type='text' id='automplete_scat_gene' name='query' placeholder="Gene lookup" value="{{ old('highlight_gene') }}" >
    <input type='text' id='automplete_scat_cat' name='query' placeholder="Category lookup" value="{{ old('cat_name') }}" >
    <button id="btn_scat_gene" class="btn btn-flat  btn-success" onclick="getGene()">Go</button>
    <button id="btn_scat_cat" class="btn btn-flat  btn-success" onclick="getCat()">Go</button>

    <div class="category_lookup">
        <div id="gene_lookup_container">
            <input type="radio" id="gene_lookup" name="look_up_type" autocomplete="off" value="gene_lookup" checked>
            <label for="gene_lookup">Gene</label><br>
        </div>

        <div id="category_lookup_container">
            <input type="radio" id="category_lookup" name="look_up_type" autocomplete="off" value="category_lookup">
            <label for="category_lookup">Category</label><br>
        </div>
    </div>
</div>

<div id='scatterplot' style='height: 800px; max-width: 800px; margin: 0 auto'>

</div>

{% block end_scripts %}
    <script>
        jQuery(document).ready(function() {

            $('#gene_lookup').on('click', function () {
                if ($('input[name=look_up_type]:checked').length > 0) {
                    $('#automplete_scat_gene').show();
                    $('#automplete_scat_cat').hide();
                    $('#btn_scat_gene').show();
                    $('#btn_scat_cat').hide();
                }
            });

            $('#category_lookup').on('click', function () {

                if ($('input[name=look_up_type]:checked').length > 0) {
                    $('#automplete_scat_cat').show();
                    $('#automplete_scat_gene').hide();
                    $('#btn_scat_cat').show();
                    $('#btn_scat_gene').hide();
                }
            });
        });

        let getUrlParameter = function getUrlParameter(sParam) {
            let sPageURL = window.location.search.substring(1),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
                }
            }
        };

        function getGene() {
            let x_axis = getUrlParameter('x_axis');
            let y_axis = getUrlParameter('y_axis');
            let experiment_code = "{{ experiment_code }}";
            let gene = document.getElementById('automplete_scat_gene').value;
            window.location.href = '/' + experiment_code + '/scatterplot?x_axis=' + x_axis + '&y_axis=' + y_axis + '&highlight_gene=' + gene;
        }

        function getCat() {
            let x_axis = getUrlParameter('x_axis');
            let y_axis = getUrlParameter('y_axis');
            let experiment_code = "{{ experiment_code }}";
            let cat = document.getElementById('automplete_scat_cat').value;
            let url = window.location.href;
            let parseURL = url.split("/");
            let base_url = parseURL[0] + "//" + parseURL[2];
            let gene_cat_url = new URL('/' + experiment_code + '/ajax/get-gene-category/' + cat, base_url);

            $.ajax({
                type: "GET",
                cat: cat,
                url: gene_cat_url,
                success: function(data) {
                    window.location.href = '/' + experiment_code + '/scatterplot?x_axis=' + x_axis + '&y_axis=' + y_axis + '&cat_id=' + data.gene_category_id[0] + '&cat_name=' + cat;
                },
                error: function(err) {
                    console.log(err);
                }
            });
        }

        $.ajax({
            type: "GET",
            url: "{{ url('/'~experiment_code~'/ajax/gene-list') }}",
            success: function(data) {
                $( '#automplete_scat_gene' ).autocomplete({
                    source: data.gene_list,
                    minLength: 2
                });
            },
            error: function(err) {}
        });

        $.ajax({
            type: "GET",
            url: "{{ url('/'~experiment_code~'/ajax/gene-category-list') }}",
            success: function(data) {
                $( '#automplete_scat_cat' ).autocomplete({
                    source: data.gene_category_list,
                    minLength: 2
                });
            },
            error: function(err) {
                console.log(err);
            }
        });
    </script>
{% endblock %}
